const jwt = require("jsonwebtoken");
require("dotenv").config();
const secretKey = process.env.JWT_SECRET;

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
const authenticate = (req, res, next) => {
  console.log('üîë Debug authenticate middleware:');
  console.log('  - Authorization header:', req.headers.authorization);

  const token = req.headers.authorization?.split(" ")[1];

  if (!token) {
    console.log('‚ùå No token provided');
    return res.status(401).json({ error: "Access denied. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, secretKey);
    req.user = decoded; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å token ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô req.user

    console.log('‚úÖ Token verified successfully:');
    console.log('  - Decoded user ID:', decoded.userId);
    console.log('  - Decoded role:', decoded.role);
    console.log('  - Decoded user name:', decoded.user);

    next();
  } catch (error) {
    console.log('‚ùå Token verification failed:', error.message);
    res.status(401).json({ error: "Invalid token" });
  }
};

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const authorizeAdmin = (req, res, next) => {

  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "Access denied. Admins only." });
  }
  next();
};

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role (Admin ‡πÅ‡∏•‡∏∞ User ‡πÑ‡∏î‡πâ)
const authorizeUserOrAdmin = (req, res, next) => {
  console.log('üîê Debug authorizeUserOrAdmin:');
  console.log('  - User role from token:', req.user.role);
  console.log('  - User ID from token:', req.user.userId);

  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ role ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
  const allowedRoles = ["admin", "SuperAdmin", "Accounting", "Member", "user"];

  if (!allowedRoles.includes(req.user.role)) {
    console.log('‚ùå Access denied - role not allowed:', req.user.role);
    return res.status(403).json({ error: "Access denied." });
  }

  console.log('‚úÖ Access granted - role allowed:', req.user.role);
  next();
};

module.exports = { authenticate, authorizeAdmin, authorizeUserOrAdmin };
