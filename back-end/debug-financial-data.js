const mongoose = require('mongoose');
const Income = require('./models/income');
const Expense = require('./models/expense');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect('mongodb://localhost:27017/i-amp-yoqa', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const debugFinancialData = async () => {
  try {
    console.log('üîç Debugging Financial Data...\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalIncome = await Income.countDocuments();
    const totalExpense = await Expense.countDocuments();

    console.log(`üìä Total Income Records: ${totalIncome}`);
    console.log(`üìä Total Expense Records: ${totalExpense}\n`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    console.log('üí∞ Income Data:');
    const incomes = await Income.find().limit(5).sort({ createdAt: -1 });
    incomes.forEach((income, index) => {
      console.log(`  ${index + 1}. Amount: ${income.amount}, Type: ${income.income_type}, Status: ${income.status}, Date: ${income.income_date}`);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    const incomeByStatus = await Income.aggregate([
      { $group: { _id: '$status', count: { $sum: 1 }, total: { $sum: '$amount' } } }
    ]);
    console.log('\nüìà Income by Status:');
    incomeByStatus.forEach(item => {
      console.log(`  ${item._id}: ${item.count} records, Total: ${item.total}`);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    console.log('\nüí∏ Expense Data:');
    const expenses = await Expense.find().limit(5).sort({ createdAt: -1 });
    expenses.forEach((expense, index) => {
      console.log(`  ${index + 1}. Amount: ${expense.amount}, Category: ${expense.category}, Status: ${expense.status}, Date: ${expense.expense_date}`);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    const expenseByStatus = await Expense.aggregate([
      { $group: { _id: '$status', count: { $sum: 1 }, total: { $sum: '$amount' } } }
    ]);
    console.log('\nüìâ Expense by Status:');
    expenseByStatus.forEach(item => {
      console.log(`  ${item._id}: ${item.count} records, Total: ${item.total}`);
    });

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    console.log(`\nüìÖ Testing queries for current month (${startOfMonth.toISOString().split('T')[0]} to ${endOfMonth.toISOString().split('T')[0]}):`);

    // Test ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà confirmed
    const confirmedIncomes = await Income.find({
      income_date: { $gte: startOfMonth, $lte: endOfMonth },
      status: 'confirmed'
    });
    console.log(`  ‚úÖ Confirmed incomes this month: ${confirmedIncomes.length} records`);

    // Test ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà approved  
    const approvedExpenses = await Expense.find({
      expense_date: { $gte: startOfMonth, $lte: endOfMonth },
      status: 'approved'
    });
    console.log(`  ‚úÖ Approved expenses this month: ${approvedExpenses.length} records`);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)
    const startOfYear = new Date(now.getFullYear(), 0, 1);
    const endOfYear = new Date(now.getFullYear(), 11, 31);

    console.log(`\nüìÖ Testing queries for current year (${startOfYear.toISOString().split('T')[0]} to ${endOfYear.toISOString().split('T')[0]}):`);

    const yearIncomes = await Income.find({
      income_date: { $gte: startOfYear, $lte: endOfYear },
      status: 'confirmed'
    });
    console.log(`  ‚úÖ Confirmed incomes this year: ${yearIncomes.length} records`);

    const yearExpenses = await Expense.find({
      expense_date: { $gte: startOfYear, $lte: endOfYear },
      status: 'approved'
    });
    console.log(`  ‚úÖ Approved expenses this year: ${yearExpenses.length} records`);

    mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå Error:', error);
    mongoose.disconnect();
  }
};

debugFinancialData();

